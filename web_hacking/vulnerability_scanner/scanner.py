
from bs4 import BeautifulSoup
import requests
import urllib.parse
import re
import concurrent.futures


class Scanner:
    """ 
    The Scanner class provides a set of functions to test for vulnerabilities in forms and links.
    """

    def __init__(self, url, ignore_links):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links

    def extract_links_from(self, url):
        """
        extract all the links from the given url.

        Args:
            url (string): The url to be crawled.
        """
        try:
            response = self.session.get(url)
            return re.findall('(?:href=")(.*?)"', str(response.content))
        except requests.exceptions.ConnectionError:
            print("Connection refused")

    def crawler(self, url=None):
        """
        This function is the main crawler function. and it will be called recursively to search for all the links in the given url.

        Args:
            url (string): The url to be crawled.
        """
        if url is None:
            url = self.target_url
        href_links = self.extract_links_from(url)
        for link in href_links:
            link = urllib.parse.urljoin(url, link)

            if "#" in link:
                link = link.split("#")[0]

            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link)
                print('[+] %s' % link)
                self.crawler(link)

    def extract_forms(self, url):
        """
        extract all the forms from the given url.

        Args:
            url (string): The url to be crawled.
        """
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, "html.parser")
        return parsed_html.findAll("form")

    def submit_form(self, form, value, url):
        """
        Submit the form to the given url. to do that we need to find the action attribute of the form and then call the post method of requests.

        Args:
            form (bs4.Form): The form to be submitted.
            value (string): The value of the form.
            url (string): The url of the form.
        """
        action = form.get("action")
        post_url = urllib.parse.urljoin(url, action)
        method = form.get("method")

        inputs_list = form.findAll("input")
        post_data = {}

        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "text":
                input_value = value

            post_data[input_name] = input_value
        if method == "post":
            return self.session.post(post_url, data=post_data)
        return self.session.get(post_url, params=post_data)

    def test_xss_in_link(self, url):
        """
        In this function we test if the url is vulnerable to XSS by:
            - Submitting the url with a value that is not expected
            - Testing if the XSS payload appears in the response

        Args:
            url (string): The url to be tested.
        """
        xss_test_script = "<sCripT>alert('test')</ScriPt>"
        url = url.replace("=", "=" + xss_test_script)
        response = self.session.get(url)
        return xss_test_script in response.content.decode()

    def test_xss_in_form(self, form, url):
        """
        In this function we test if the form is vulnerable to XSS by:
            - Submitting the form with a value that is not expected
            - Testing if the XSS payload appears in the response

        Args:
            form (bs4.Form): The form to be tested.
            url (string): The url of the form.
        """
        xss_test_script = "<sCripT>alert('test')</ScriPt>"
        response = self.submit_form(form, xss_test_script, url)
        return xss_test_script in response.content.decode()

    def test_local_file_inclusion(self, url):
        """
        In this function we test if the url is vulnerable to LFI by:
            - Submitting the url with a value that is not expected
            - Testing if the we can access a file on the server by appending a file extension to the url.
            - Using concurrent.futures to create a thread pool and map the function to each url.

        Args:
            url (string): The url to be tested.
        """

        payload = "../"
        file_name = "proc/self/environ"

        for i in range(1, 10):
            # multiply the payload length by the number of iterations until we find the file
            payload *= i
            url_with_payload = url.split(
                "=")[0] + "=" + payload + file_name
            response = self.session.get(url_with_payload, timeout=5)
            if "USER_AGENT" in response.text or "PHPSESSID" in response.text:
                print("[!] Payload >>> " + url_with_payload)
                return True

    def test_sql_in_form(self, form, url):
        """
        In this function we test if the form is vulnerable to SQL Injection by:
            - Submitting the form with a sql payload

        Args:
            form (bs4.Form): The form to be tested.
            url (string): The url of the form.
        """
        for c in "\"'":
            payload = c
            response = self.submit_form(form, payload, url)
            if self.is_vulnerable_to_sql_injection(response):
                return True

    def test_sql_in_link(self, url):
        """
        In this function we test if the url is vulnerable to SQL Injection by:
            - Submitting the url with a sql payload

        Args:
            url (string): The url to be tested.
        """
        for c in "\"'":
            payload = c
            new_url = f"{url}{payload}"
            response = self.session.get(new_url)
            if self.is_vulnerable_to_sql_injection(response):
                return True

    def is_vulnerable_to_sql_injection(self, response):
        """
        In this function we test if the response is vulnerable to SQL Injection by:
            - Checking if the response contains any of the error messages we defined above.

        Args:
            response (bs4.Response): The response to be tested.
        """
        errors = {
            # MySQL
            "you have an error in your sql syntax;",
            "warning: mysql",
            # SQL Server
            "unclosed quotation mark after the character string",
            # Oracle
            "quoted string not properly terminated",
        }
        for error in errors:
            if error in response.content.decode().lower():
                return True

    def run_scanner(self):
        """
        This is the main function of the scanner. It will call all the other functions and diplay the results.
        """
        print("\n[*] Starting Scanner...")
        for link in self.target_links:
            forms = self.extract_forms(link)
            if len(forms) != 0:
                for form in forms:

                    # Vulnerability in forms
                    print("\n[+] Testing form in " + link)
                    if self.test_xss_in_form(form, link):
                        print("[***] XSS discovered in " +
                              link + " in the following form")
                        print(form)
                    if self.test_sql_in_form(form, link):
                        print("[***] SQL Injection discovered in " +
                              link + " in the following form")
                        print(form)

            # vulnerability in links
            if "=" in link:
                print("\n[+] Testing " + link)
                if self.test_xss_in_link(link):
                    print("[***] Discovered XSS in " + link)
                if self.test_local_file_inclusion(link):
                    print(
                        "[***] Discovered Local File Inclusion (LFI) in " + link)
                if self.test_sql_in_link(link):
                    print("[***] Discovered SQL Injection in " + link)
