
from bs4 import BeautifulSoup
import requests
import urllib.parse
import re


class Scanner:
    def __init__(self, url, ignore_links):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links

    def extract_links_from(self, url):
        """
        extract all the links from the given url.

        Args:
            url (string): The url to be crawled.
        """
        try:
            response = self.session.get(url)
            return re.findall('(?:href=")(.*?)"', str(response.content))
        except requests.exceptions.ConnectionError:
            print("Connection refused")

    def crawler(self, url=None):
        """
        This function is the main crawler function. and it will be called recursively to search for all the links in the given url.

        Args:
            url (string): The url to be crawled.
        """
        if url is None:
            url = self.target_url
        href_links = self.extract_links_from(url)
        for link in href_links:
            link = urllib.parse.urljoin(url, link)

            if "#" in link:
                link = link.split("#")[0]

            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link)
                print(link)
                self.crawler(link)

    def extract_forms(self, url):
        """
        extract all the forms from the given url.

        Args:
            url (string): The url to be crawled.
        """
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, "html.parser")
        return parsed_html.findAll("form")

    def submit_form(self, form, value, url):
        """
        Submit the form to the given url. to do that we need to find the action attribute of the form and then call the post method of requests.

        Args:
            form (bs4.Form): The form to be submitted.
            value (string): The value of the form.
            url (string): The url of the form.
        """
        action = form.get("action")
        post_url = urllib.parse.urljoin(url, action)
        method = form.get("method")

        inputs_list = form.findAll("input")
        post_data = {}

        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "text":
                input_value = value

            post_data[input_name] = input_value
        if method == "post":
            return self.session.post(post_url, data=post_data)
        return self.session.get(post_url, params=post_data)

    def test_xss_in_link(self, url):
        """
        Test if the links are XSS vulnerable or not.
        """
        xss_test_script = "<sCripT>alert('test')</ScriPt>"
        url = url.replace("=", "=" + xss_test_script)
        response = self.session.get(url)
        return xss_test_script in response.content.decode()

    def test_xss_in_form(self, form, url):
        """
        Test if the form is XSS vulnerable or not.

        Args:
            form (bs4.Form): The form to be tested.
        """
        xss_test_script = "<sCripT>alert('test')</ScriPt>"
        response = self.submit_form(form, xss_test_script, url)
        return xss_test_script in response.content.decode()

    def run_scanner(self):
        """
        This function will be called to run the scanner.
        """
        for link in self.target_links:
            forms = self.extract_forms(link)
            if len(forms) != 0:
                for form in forms:

                    # Vulnerability in forms
                    print("\n\n[+] Testing form in " + link)
                    is_vulnerable_to_xss = self.test_xss_in_form(form, link)
                    if is_vulnerable_to_xss:
                        print("\n[***] XSS discovered in " +
                              link + " in the following form")
                        print(form)

            # vulnerability in links
            if "=" in link:
                print("\n\n[+] Testing " + link)
                is_vulnerable_to_xss = self.test_xss_in_link(link)
                if is_vulnerable_to_xss:
                    print("\n[***] Discovered XSS in " + link)
                if self.test_local_file_inclusion(link):
                    print("\n[***] Discovered Local File Inclusion in " + link)

    def test_local_file_inclusion(self, url):
        """
        Test if the given url is vulnerable to local file inclusion.

        Args:
            url (string): The url to be tested.
        """
        payload = "../../../../../../../../../../../../../../../../../etc/passwd"
        url = url.split("=")[0] + "=" + payload
        response = self.session.get(url)
        return 'root:' in response.text
